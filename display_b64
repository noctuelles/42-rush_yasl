#!ressources/yasl_linux

{
	"Image received, nb pixels : "
	print
	1:=:0
	print "\n" print
} image_received

{
	"Found square : "
	print
	2:=:0
	print "\n" print
} found_square

{
	2:=:0 2:=:0 *	// Multiply by itself the square size
	1:=:0			// Get the number of pixels
	!=				// If we doesn't get the same amount it's a bad image !
	? ("Invalid image. Aborting.\n" print 1 exit) : ("Correct image. Rendering...\n" print)
} check_if_image_valid

{
	4 / =:1 !		// Put the amount of pixels into stack 1.
} get_nbr_pixels

{
	"Wrong image : the image must be square.\n"
	print
	1
	exit
} print_wrong_image

{
	1:4			// stack 4, pour la boucle
	1:3				// on commence a 1 dans la stack 3
	4:%@ (
		3:=:3		// on duplique le nombre dans 3
		3:%*:3		// on le multiplie par lui meme
		1:=:3		// on va chercher le nombre de pixels on le met dans 3
		3:%==:3  3:? (3:(!!!):3 4:! 0:4) : (
			3:%>:3 3:? (3:print_wrong_image:3) : (3:(!!!):3 1:3 3:+:3)
		)
	)
	4:(!)			// La stack 4 est maintenant vide
	3:=:2 3:!		// La stack 2 contient la taille du carre. La stack 3 est maintenant vide.
} get_square_size

{
	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
} make_table

#!

// ***************** Init ******************* //

1:1					// Placer le bool pour la lectrure
""					// Chaine vide initiale
1:%@ (				// Loop de la lecture du fichier
	0:read:0
	65535:0
	(0:==:0) 0:? (1:! 1:1) : (1:! 0:1)
	0:+
)					// Notre fichier est entierement lu.
1:!					// La stack 1 est maintenant vide
[#]					// On obtient le nombres de caracteres du fichier
get_nbr_pixels
get_square_size
image_received
found_square

// ***************** String Splitting ******************* //

][:3
3:(!):3				// Remove the number of char on stack 3
1:=:4
4:%@ (
	3:(+++):3
	3:=:0 3:(!):3
	1:4 4:-:4
)
					// Now all the splitted strings are on 0 in the right order.
4:(!):4				// Stack 4 is now empty, Stack 3 too
3:make_table:3		// Stack 3, la table
][:4
4:#(
	4:print "\n":4 4:print
)
